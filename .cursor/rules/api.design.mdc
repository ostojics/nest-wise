---
description: API design rules
globs:
alwaysApply: true
---

# API Design Guide: Sorting, Filtering, and Searching (Simplified)

This document outlines a simplified set of conventions for implementing sorting, filtering, and searching in RESTful APIs. These practices are designed to be easy to understand and implement, while still following a consistent, professional standard.

---

## 1. Base URL and Content Type

All API requests should use a consistent base URL, such as `https://api.example.com/v1`. The primary data format for requests and responses should be `application/json`.

---

## 2. Filtering

Filtering allows clients to retrieve a specific subset of resources. Use query parameters for all filtering.

### 2.1. Simple Filtering

For exact matches, use the field name as the query parameter. For multiple filters, simply add more parameters.

**Convention:** `GET /resources?field_name=value`

**Examples:**

- Retrieve products in the 'electronics' category:
  `GET /products?category=electronics`

- Retrieve orders that are 'shipped' and placed in 2023:
  `GET /orders?status=shipped&year=2023`

### 2.2. Advanced Filtering with Operators

For more advanced comparisons, use the field name followed by an underscore and the operator.

**Common Operators:**

- `gt`: Greater than
- `gte`: Greater than or equal to
- `lt`: Less than
- `lte`: Less than or equal to
- `in`: Value is in a comma-separated list
- `like`: Partial string match

**Convention:** `GET /resources?field_name_operator=value`

**Examples:**

- Retrieve products with a price greater than 50:
  `GET /products?price_gt=50`

- Retrieve users whose role is 'admin' or 'editor':
  `GET /users?role_in=admin,editor`

### 2.3. Filtering by Date Range

For date range filtering, use a simple `_from` and `_to` convention.

**Convention:** `GET /resources?date_field_from=start_date&date_field_to=end_date`

**Example:**

- Retrieve orders placed within the first quarter of 2023:
  `GET /orders?createdAt_from=2023-01-01T00:00:00Z&createdAt_to=2023-03-31T23:59:59Z`

---

## 3. Sorting

Sorting allows clients to specify the order of the returned resources.

**Convention:** `GET /resources?sort=field1,-field2`

- Use the `sort` query parameter.
- Separate multiple fields with commas.
- Use a hyphen (`-`) prefix for descending order. Ascending is the default.

**Examples:**

- Sort products by name in ascending order:
  `GET /products?sort=name`

- Sort products by price (descending), then by name (ascending):
  `GET /products?sort=-price,name`

---

## 4. Pagination

Pagination is essential for managing large result sets. Use simple `page` and `pageSize` parameters.

**Convention:** `GET /resources?page=page_number&pageSize=items_per_page`

**Examples:**

- Retrieve the first page of 10 products:
  `GET /products?page=1&pageSize=10`

- Retrieve the third page of 20 users:
  `GET /users?page=3&pageSize=20`

### 4.1. Pagination Metadata

When a response is paginated, include metadata to inform the client about the total number of items and pages.

**Example Response Structure:**

```json
{
  "data": [
    // Array of resource objects
  ],
  "meta": {
    "totalCount": 50,
    "pageSize": 10,
    "currentPage": 1,
    "totalPages": 5
  }
}
```
