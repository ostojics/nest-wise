//// ===================================================================================
//// GameStats - Relational Data Model (PostgreSQL)
////
//// Multi-Tenant Strategy: Schema per Tenant
//// - 'public' schema: Contains global data (users, tenants).
//// - tenant schemas: A new schema is created for each studio, containing their data.
//// ===================================================================================

//// --- Public Schema (Shared across all tenants) ---

Table public.users {
  id uuid [pk, default: `gen_random_uuid()`]
  full_name varchar
  email varchar [unique, not null]
  password_hash varchar [not null]
  created_at timestamptz [default: `now()`]
  updated_at timestamptz [default: `now()`]
}

Table public.studios {
  id uuid [pk, default: `gen_random_uuid()`]
  name varchar [not null]
  owner_id uuid [not null, ref: > public.users.id]
  schema_name varchar [unique, not null] // e.g., 'studio_12345'
  created_at timestamptz [default: `now()`]
  updated_at timestamptz [default: `now()`]

  indexes {
    (owner_id)
  }
}

//// --- Tenant Schema Template (Repeated for each studio) ---
//// The following tables would exist within each tenant's schema (e.g., 'studio_12345.games').

Table games {
  id uuid [pk, default: `gen_random_uuid()`]
  // studio_id is implicit via the schema
  name varchar [not null]
  api_key varchar [unique, not null, default: `gen_random_uuid()`]
  created_at timestamptz [default: `now()`]
  updated_at timestamptz [default: `now()`]
}

Table studio_members {
  user_id uuid [ref: > public.users.id] // Foreign key to the public users table
  role varchar [not null, default: 'member'] // e.g., 'owner', 'admin', 'developer'
  created_at timestamptz [default: `now()`]

  pk: [user_id]
}

Table event_definitions {
  id uuid [pk, default: `gen_random_uuid()`]
  game_id uuid [not null, ref: > games.id]
  name varchar [not null] // e.g., 'level_up', 'item_purchased
  created_at timestamptz [default: `now()`]

  indexes {
    (game_id)
    (game_id, name) [unique]
  }
}


//// ===================================================================================
//// GameStats - Analytical Data Model (InfluxDB)
////
//// Strategy: One bucket for all events, with data separated by tags.
//// Link to Relational: The 'game_id' tag links back to the 'games' table in PostgreSQL.
//// ===================================================================================

//// --- Measurement: game_events ---
//// Tracks all discrete player events, both predefined and custom. Mimics Sentry's model.
////
//// Tags (for filtering): [game_id, platform, player_id, event_type]
//// Fields (for inspection): [context (string_json)] // A JSON string containing all custom key-value pairs.
//// Timestamp: Time of the event

//// --- Measurement: session_events ---
//// Tracks player session start, end, and duration.
////
//// Tags: [game_id, platform, country, session_id]
//// Fields: [duration_seconds (integer), event_count (integer)]
//// Timestamp: Time of the event

//// --- Measurement: performance_metrics ---
//// Tracks technical performance metrics from clients.
////
//// Tags: [game_id, platform, device_model, os_version]
//// Fields: [fps (integer), memory_usage_mb (integer), load_time_ms (integer)]
//// Timestamp: Time of the metric capture

//// --- Measurement: error_logs ---
//// Tracks errors and exceptions from the game client.
////
//// Tags: [game_id, platform, player_id, error_type, os_version]
//// Fields: [error_message (string), stack_trace (string), is_fatal (boolean)]
//// Timestamp: Time of the error
